generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CaseStatus {
  REPORTED
  PSP_CREATED
  SPK_CREATED
  RR_CREATED
  COMPLETED
  MONITORING
}

enum RepairResult {
  FIXED
  MONITORING
  NOT_FIXED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}

model ServiceRequest {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Legacy/customer-facing fields (kept for compatibility)
  customerName       String
  address            String
  serviceNumber      String?  // No. S.L.
  phone              String?

  receivedAt         DateTime? // DITERIMA Hari/Tgl + Jam
  receivedBy         String?   // Petugas Jaga

  handledAt          DateTime? // DIKERJAKAN OLEH Hari/Tgl + Jam
  handlerName        String?   // Petugas Penanggulangan

  inspectedAt        DateTime?
  inspectorName      String?

  reasons            Json?    // JSON array of reasons
  otherReason        String?   // Lain-lain
  actionTaken        String?   // Tindakan yang dilakukan (ringkas)

  serviceCostBy      String?   // PERUMDA AM | Langganan

  handoverReceiver   String?   // Yang Menerima (BAP mini inside form)
  handoverCustomer   String?   // Nama Pelanggan
  handoverAt         DateTime? // Hari/Tanggal penyerahan

  // PSP (MVP) fields
  reporterName       String?
  reporterPhone      String?
  description        String?   @db.Text
  urgency            Urgency  @default(MEDIUM)
  requestDate        DateTime @default(now())
  notes              String?  @db.Text

  // Relations
  workOrder          WorkOrder?
  complaint          Complaint? @relation(name: "ComplaintToServiceRequest")

  @@index([createdAt])
}

model WorkOrder {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  reportDate         DateTime? // Lap. Hari/Tgl
  number             String?   // No
  handledDate        DateTime? // Hari/Tgl. ditangani

  reporterName       String?
  handlingTime       String?
  disturbanceLocation String?
  disturbanceType    String?

  city               String?   // e.g., Singaraja
  cityDate           DateTime?
  executorName       String?
  team               String?

  // New SPK (MVP) fields
  technicians        String?   // daftar nama teknisi dipisah koma
  scheduledDate      DateTime?
  instructions       String?   @db.Text

  // Relations
  serviceRequestId   String?   @unique
  serviceRequest     ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)
  repairReport       RepairReport?
  complaint          Complaint? @relation(name: "ComplaintToWorkOrder")

  @@index([createdAt])
}

model RepairReport {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // New BAP fields (MVP)
  actionTaken        String?   @db.Text
  startTime          DateTime?
  endTime            DateTime?
  result             RepairResult?
  remarks            String?   @db.Text
  customerConfirmationName String?

  // Deprecated legacy fields (kept for backward compatibility)
  actions            Json?
  otherActions       String?
  notHandledReasons  Json?
  otherNotHandled    String?
  city               String?
  cityDate           DateTime?
  executorName       String?
  team               String?
  authorizedBy       String?

  // Relations
  workOrderId        String?  @unique
  workOrder          WorkOrder? @relation(fields: [workOrderId], references: [id], onDelete: SetNull)
  complaint          Complaint? @relation(name: "ComplaintToRepairReport")

  @@index([createdAt])
}

model Complaint {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  customerName     String
  address          String   @db.Text
  mapsLink         String?  @db.VarChar(512)
  connectionNumber String? // No Sambungan Pelanggan (No. SL)
  phone            String?
  complaintText    String   @db.Text // Keluhan/Pengaduan (deskripsi bebas)
  category         String   // Kategori pengaduan dari daftar pilihan
  processedAt      DateTime?

  // Status tracking
  status           CaseStatus @default(REPORTED)
  histories        StatusHistory[]

  // Optional linkage to processing chain
  serviceRequestId String? @unique
  workOrderId      String? @unique
  repairReportId   String? @unique

  serviceRequest   ServiceRequest? @relation(name: "ComplaintToServiceRequest", fields: [serviceRequestId], references: [id], onDelete: SetNull)
  workOrder        WorkOrder?      @relation(name: "ComplaintToWorkOrder", fields: [workOrderId], references: [id], onDelete: SetNull)
  repairReport     RepairReport?   @relation(name: "ComplaintToRepairReport", fields: [repairReportId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([status, createdAt])
}

model StatusHistory {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  complaintId  String
  complaint    Complaint  @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  status       CaseStatus
  note         String?    @db.Text
  actorRole    String
  actorId      String?

  @@index([complaintId, createdAt])
}
